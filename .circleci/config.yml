# -------------------------
#        DEFAULTS
# -------------------------
defaults: &defaults
  working_directory: ~/react-native-netinfo
  environment:
  - GIT_COMMIT_DESC: git log --format=oneline -n 1 $CIRCLE_SHA1

# LINUX
linux_defaults: &linux_defaults
  <<: *defaults
  docker:
  - image: circleci/node:8
  environment:
  - PATH: "/opt/yarn/yarn-v1.5.1/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

# ANDROID
android_defaults: &android_defaults
  <<: *defaults
  docker:
  - image: circleci/android:api-27-node8-alpha
  environment:
  - TERM: "dumb"
  - ADB_INSTALL_TIMEOUT: 10
  - _JAVA_OPTIONS: "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
  - GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-XX:+HeapDumpOnOutOfMemoryError"'
  - BUILD_THREADS: 2

# MACOS
macos_defaults: &macos_defaults
  <<: *defaults
  macos:
    xcode: "10.1.0"

# -------------------------
#         ALIASES
# -------------------------

aliases:
# CACHE
- &restore-yarn-cache
  keys:
  - yarn-cache-{{ arch }}-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}
  - yarn-cache-{{ arch }}
- &save-yarn-cache
  paths:
  - ~/.cache/yarn
  - ~/Library/Detox/ios
  key: yarn-cache-{{ arch }}-{{ checksum "package.json" }}-{{ checksum "yarn.lock" }}

- &restore-gradle-cache
  keys:
  - gradle-cache-{{ checksum "android/build.gradle" }}-{{ checksum "example/android/build.gradle" }}-{{ checksum "example/android/app/build.gradle" }}
- &save-gradle-cache
  paths:
  - ~/.gradle
  key: gradle-cache-{{ checksum "android/build.gradle" }}-{{ checksum "example/android/build.gradle" }}-{{ checksum "example/android/app/build.gradle" }}

- &restore-macos-gradle-cache
  keys:
  - macos-gradle-cache-{{ checksum "android/build.gradle" }}-{{ checksum "example/android/build.gradle" }}-{{ checksum "example/android/app/build.gradle" }}
- &save-macos-gradle-cache
  paths:
  - ~/.gradle
  key: macos-gradle-cache-{{ checksum "android/build.gradle" }}-{{ checksum "example/android/build.gradle" }}-{{ checksum "example/android/app/build.gradle" }}

- &restore-homebrew-cache
  keys:
  - homebrew-cache-v1
- &save-homebrew-cache
  paths:
  - ~/Library/Caches/Homebrew
  - /usr/local/Homebrew
  key: homebrew-cache-v1

- &restore-ios-detox-cache
  keys:
  - ios-detox-cache-v1
- &save-ios-detox-cache
  paths:
  - ~/react-native-netinfo/example/ios/build
  key: ios-detox-cache-v1

# INSTALLATION
- &yarn
  name: Yarn Install
  command: yarn install --network-concurrency 1 --non-interactive --cache-folder ~/.cache/yarn & wait

# ANALYSE
- &eslint
  name: ESLint Checks
  command: yarn test:eslint

- &flow
  name: Flow Checks
  command: yarn test:flow

- &jest
  name: Jest Unit Tests
  command: yarn test:jest

- &metro
  name: Start React Native Packager (background)
  background: true
  command: yarn start || true
- &metro-warmup
  name: Warm up Packager
  background: true
  command: node .circleci/scripts/packager-warmup.js

# -------------------------
#          JOBS
# -------------------------
version: 2
jobs:
  # Set up a Linux environment for downstream jobs
  linux-checkout:
    <<: *linux_defaults
    steps:
    - checkout
    - restore-cache: *restore-yarn-cache
    - run: rm -rf node_modules
    - run: yarn cache clean
    - run: *yarn
    - save-cache: *save-yarn-cache
    - persist_to_workspace:
        root: .
        paths: .

  eslint:
    <<: *linux_defaults
    steps:
    - attach_workspace:
        at: ~/react-native-netinfo
    - run: *eslint

  flow:
    <<: *linux_defaults
    steps:
    - attach_workspace:
        at: ~/react-native-netinfo
    - run: *flow
  
  jest:
    <<: *linux_defaults
    steps:
    - attach_workspace:
        at: ~/react-native-netinfo
    - run: *jest

  android-compile:
    <<: *android_defaults
    steps:
    - attach_workspace:
        at: ~/react-native-netinfo
    - restore-cache: *restore-gradle-cache
    - run:
        name: Accept Android licences
        command: |-
          yes | sdkmanager --licenses || exit 0
          yes | sdkmanager --update || exit 0
    - run:
        name: Build Android Example App and Library
        command: |-
          cd example/android
          ./gradlew clean assembleDebug
    - save-cache: *save-gradle-cache
  
  android-detox:
    <<: *macos_defaults
    steps:
    # Setup
    - checkout
    - run:
        name: Configure Environment Variables
        command: |
          echo 'export PATH="$PATH:/usr/local/opt/node@8/bin:~/.yarn/bin:~/react-native-firebase/node_modules/.bin:~/react-native-firebase/tests/node_modules/.bin"' >> $BASH_ENV
          echo 'export ANDROID_HOME="/usr/local/share/android-sdk"' >> $BASH_ENV
          echo 'export ANDROID_SDK_ROOT="/usr/local/share/android-sdk"' >> $BASH_ENV
          echo 'export PATH="$ANDROID_SDK_ROOT/emulator:$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/platform-tools:$PATH"' >> $BASH_ENV
          echo 'export QEMU_AUDIO_DRV=none' >> $BASH_ENV
          echo 'export JAVA_HOME=/Library/Java/Home' >> $BASH_ENV
          source $BASH_ENV
    
    - restore-cache: *restore-homebrew-cache
    - run:
        name: Install Android SDK Tools
        command: |
          HOMEBREW_NO_AUTO_UPDATE=1 brew tap homebrew/cask >/dev/null
          HOMEBREW_NO_AUTO_UPDATE=1 brew cask install android-sdk >/dev/null
          HOMEBREW_NO_AUTO_UPDATE=1 brew cask install intel-haxm >/dev/null
          HOMEBREW_NO_AUTO_UPDATE=1 brew install node@8 >/dev/null >/dev/null
    - save-cache: *save-homebrew-cache

    - restore-cache: *restore-yarn-cache
    - run: rm -rf node_modules
    - run: *yarn
    - save-cache: *save-yarn-cache

    - restore-cache: *restore-macos-gradle-cache
    - run:
        name: Accept Android licences
        command: |-
          yes | sdkmanager --licenses || exit 0
          yes | sdkmanager --update || exit 0
    - run:
        name: Build app using Detox
        command: yarn test:detox:android:build
    - save-cache: *save-macos-gradle-cache

    - run: *metro
    - run: *metro-warmup

    - run:
        name: Install Android Emulator
        shell: /bin/bash -e
        command: |
          yes | sdkmanager "platform-tools"  "tools" >/dev/null
          yes | sdkmanager "platforms;android-28" "system-images;android-27;google_apis;x86" "system-images;android-28;google_apis;x86" >/dev/null
          yes | sdkmanager "emulator" --channel=3 >/dev/null
          yes | sdkmanager "build-tools;28.0.3" >/dev/null
          yes | sdkmanager --licenses >/dev/null
          yes | sdkmanager --list
    # to force ssh key generation for emulators
    - run:
        name: ADB Start Stop
        command: |
          adb start-server
          adb devices
          adb kill-server
          ls -la ~/.android
    
    - run:
        name: Create Android Emulator (API 28)
        command: avdmanager create avd --force -n TestingAVD -k "system-images;android-28;google_apis;x86" -g google_apis -d "Nexus 4"
    - run:
        name: Start Android Emulator (API 28) in background
        command: |
          /usr/local/share/android-sdk/emulator/emulator @TestingAVD -version
          /usr/local/share/android-sdk/emulator/emulator @TestingAVD -skin 470x860 -cores 2 -gpu auto -accel on -memory 2048 -no-audio -no-snapshot -no-window -logcat *:W | grep -i 'ReactNative\|RNFB\|com.testing\|io.invertase\|firebase'
        background: true
    - run:
        name: Wait for AVD to be ready (API 28)
        no_output_timeout: "5m"
        command: sh ./.circleci/scripts/wait-for-avd.sh

    - run:
        name: Run detox tests
        command: yarn test:detox:android:test

  ios-detox:
    <<: *macos_defaults
    steps:
    - checkout
    - restore-cache: *restore-yarn-cache
    - run: rm -rf node_modules
    - run: yarn cache clean
    - run: *yarn
    - save-cache: *save-yarn-cache
    - restore-cache: *restore-homebrew-cache
    - run:
        name: Install AppleSimUtils
        command: |-
          brew tap wix/brew
          brew install applesimutils
    - save-cache: *save-homebrew-cache
    - run:
        name: Install React Native CLI
        command: npm install -g react-native-cli
    - run:
        name: Install Detox CLI
        command: npm install -g detox-cli
    - run: *metro
    - run: *metro-warmup
    - restore-cache: *restore-ios-detox-cache
    - run: 
        name: Build app using Detox
        command: yarn test:detox:ios:build
    - save-cache: *save-ios-detox-cache
    - run: 
        name: Run detox tests
        command: yarn test:detox:ios:test

  publish:
    <<: *linux_defaults
    steps:
      - attach_workspace:
          at: ~/react-native-netinfo
      - run:
          name: Publish to NPM
          command: yarn ci:publish

# -------------------------
#        WORKFLOWS
# -------------------------
workflows:
  version: 2
  Test:
    jobs:
    - linux-checkout
    - eslint:
        requires:
        - linux-checkout
    - flow:
        requires:
        - linux-checkout
    - jest:
        requires:
        - linux-checkout
    - android-compile:
        requires:
        - linux-checkout
    - android-detox
    - ios-detox
    - publish:
        requires:
        - linux-checkout
        - eslint
        - flow
        - jest
        - android-compile
        - android-detox
        - ios-detox
        filters:
          branches:
            only: master